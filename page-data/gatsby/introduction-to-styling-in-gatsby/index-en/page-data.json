{"componentChunkName":"component---src-templates-blog-post-js","path":"/gatsby/introduction-to-styling-in-gatsby/index-en/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"186c185c-7ce8-5919-8cea-6897fae2a60d","excerpt":"Welcome to part two of the Gatsby tutorial! What’s in this tutorial? In this part, you’re going to explore options for styling Gatsby websites and dive deeper…","html":"<!-- Idea: Create a glossary to refer to. A lot of these terms get jumbled -->\n<!--\n  - Global styles\n  - Component css\n  - CSS-in-JS\n  - CSS Modules\n\n-->\n<p>Welcome to part two of the Gatsby tutorial!</p>\n<h2>What’s in this tutorial?</h2>\n<p>In this part, you’re going to explore options for styling Gatsby websites and dive deeper into using React components for building sites.</p>\n<h2>Using global styles</h2>\n<p>Every site has some sort of global style. This includes things like the site’s typography and background colors. These styles set the overall feel of the site — much like the color and texture of a wall sets the overall feel of a room.</p>\n<h3>Creating global styles with standard CSS files</h3>\n<p>One of the most straightforward ways to add global styles to a site is using a global <code class=\"language-text\">.css</code> stylesheet.</p>\n<h4>✋ Create a new Gatsby site</h4>\n<p>Start by creating a new Gatsby site. It may be best (especially if you’re new to the command line) to close the terminal windows you used for <a href=\"/tutorial/part-one/\">part one</a> and start a new terminal session for part two.</p>\n<p>Open a new terminal window, create a new “hello world” Gatsby site in a directory called <code class=\"language-text\">tutorial-part-two</code>, and then move to this new directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby new tutorial-part-two https://github.com/gatsbyjs/gatsby-starter-hello-world\n<span class=\"token builtin class-name\">cd</span> tutorial-part-two</code></pre></div>\n<p>You now have a new Gatsby site (based on the Gatsby “hello world” starter) with the following structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js</code></pre></div>\n<h4>✋ Add styles to a css file</h4>\n<ol>\n<li>Create a <code class=\"language-text\">.css</code> file in your new project:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> src\n<span class=\"token function\">mkdir</span> styles\n<span class=\"token builtin class-name\">cd</span> styles\n<span class=\"token function\">touch</span> global.css</code></pre></div>\n<blockquote>\n<p>Note: Feel free to create these directories and files using your code editor, if you’d prefer.</p>\n</blockquote>\n<p>You should now have a structure like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js\n│   └── styles\n│       └── global.css</code></pre></div>\n<ol start=\"2\">\n<li>Define some styles in the <code class=\"language-text\">global.css</code> file:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/styles/global.css\"><pre class=\"language-css:title=src/styles/global.css\"><code class=\"language-css:title=src/styles/global.css\">html {\n  background-color: lavenderblush;\n}</code></pre></div>\n<blockquote>\n<p>Note: The placement of the example css file in a <code class=\"language-text\">/src/styles/</code> folder is arbitrary.</p>\n</blockquote>\n<h4>✋ Include the stylesheet in <code class=\"language-text\">gatsby-browser.js</code></h4>\n<ol>\n<li>Create the <code class=\"language-text\">gatsby-browser.js</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token function\">touch</span> gatsby-browser.js</code></pre></div>\n<p>Your project’s file structure should now look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js\n│   └── styles\n│       └── global.css\n├── gatsby-browser.js</code></pre></div>\n<blockquote>\n<p>💡 What is <code class=\"language-text\">gatsby-browser.js</code>? Don’t worry about this too much and for now, just know that <code class=\"language-text\">gatsby-browser.js</code> is one of a handful of special files that Gatsby looks for and uses (if they exist). Here, the naming of the file <strong>is</strong> important. If you do want to explore more now, check out <a href=\"/docs/browser-apis/\">the docs</a>.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Import your recently-created stylesheet in the <code class=\"language-text\">gatsby-browser.js</code> file:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=gatsby-browser.js\"><pre class=\"language-javascript:title=gatsby-browser.js\"><code class=\"language-javascript:title=gatsby-browser.js\">import &quot;./src/styles/global.css&quot;\n\n// or:\n// require(&#39;./src/styles/global.css&#39;)</code></pre></div>\n<blockquote>\n<p>Note: Both CommonJS (<code class=\"language-text\">require</code>) and ES Module (<code class=\"language-text\">import</code>) syntax work here. If you’re not sure which to choose, <code class=\"language-text\">import</code> is usually a good default. When working with files that are only run in a Node.js environment however (like <code class=\"language-text\">gatsby-node.js</code>), <code class=\"language-text\">require</code> will need to be used.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Start the development server:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby develop</code></pre></div>\n<p>If you take a look at your project in the browser, you should see a lavender background applied to the “hello world” starter:</p>\n<p><img src=\"global-css.png\" alt=\"Lavender Hello World!\"></p>\n<blockquote>\n<p>Tip: This part of the tutorial has focused on the quickest and most straightforward way to get started styling a Gatsby site — importing standard CSS files directly, using <code class=\"language-text\">gatsby-browser.js</code>. In most cases, the best way to add global styles is with a shared layout component. <a href=\"/docs/global-css/\">Check out the docs</a> for more on that approach.</p>\n</blockquote>\n<h2>Using component-scoped CSS</h2>\n<p>So far, we’ve talked about the more traditional approach of using standard css stylesheets. Now, we’ll talk about various methods of modularizing CSS to tackle styling in a component-oriented way.</p>\n<h3>CSS Modules</h3>\n<p>Let’s explore <strong>CSS Modules</strong>. Quoting from\n<a href=\"https://github.com/css-modules/css-modules\">the CSS Module homepage</a>:</p>\n<blockquote>\n<p>A <strong>CSS Module</strong> is a CSS file in which all class names and animation names\nare scoped locally by default.</p>\n</blockquote>\n<p>CSS Modules are very popular because they let you write CSS normally but with a lot more safety. The tool automatically generates unique class and animation names, so you don’t have to worry about selector name collisions.</p>\n<p>Gatsby works out of the box with CSS Modules. This approach is highly recommended for those new to building with Gatsby (and React in general).</p>\n<h4>✋ Build a new page using CSS Modules</h4>\n<p>In this section, you’ll create a new page component and style that page component using a CSS Module.</p>\n<p>First, create a new <code class=\"language-text\">Container</code> component.</p>\n<ol>\n<li>Create a new directory at <code class=\"language-text\">src/components</code> and then, in this new directory, create a file named <code class=\"language-text\">container.js</code> and paste the following:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/components/container.js\"><pre class=\"language-jsx:title=src/components/container.js\"><code class=\"language-jsx:title=src/components/container.js\">import React from &quot;react&quot;\nimport containerStyles from &quot;./container.module.css&quot;\n\nexport default ({ children }) =&gt; (\n  &lt;div className={containerStyles.container}&gt;{children}&lt;/div&gt;\n)</code></pre></div>\n<p>You’ll notice you imported a css module file named <code class=\"language-text\">container.module.css</code>. Let’s create that file now.</p>\n<ol start=\"2\">\n<li>In the same directory (<code class=\"language-text\">src/components</code>), create a <code class=\"language-text\">container.module.css</code> file and copy/paste the following:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/components/container.module.css\"><pre class=\"language-css:title=src/components/container.module.css\"><code class=\"language-css:title=src/components/container.module.css\">.container {\n  margin: 3rem auto;\n  max-width: 600px;\n}</code></pre></div>\n<p>You’ll notice that the file name ends with <code class=\"language-text\">.module.css</code> instead of the usual <code class=\"language-text\">.css</code>. This is how you tell Gatsby that this CSS file should be processed as a CSS module rather than plain CSS.</p>\n<ol start=\"3\">\n<li>Create a new page component by creating a file at\n<code class=\"language-text\">src/pages/about-css-modules.js</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/about-css-modules.js\"><pre class=\"language-jsx:title=src/pages/about-css-modules.js\"><code class=\"language-jsx:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\n\nimport Container from &quot;../components/container&quot;\n\nexport default () =&gt; (\n  &lt;Container&gt;\n    &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n    &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n  &lt;/Container&gt;\n)</code></pre></div>\n<p>Now, if you visit <code class=\"language-text\">http://localhost:8000/about-css-modules/</code>, your page should look something like this:</p>\n<p><img src=\"css-modules-basic.png\" alt=\"Page with CSS module styles\"></p>\n<h4>✋ Style a component using CSS Modules</h4>\n<p>In this section, you’ll create a list of people with names, avatars, and short Latin biographies. You’ll create a <code class=\"language-text\">&lt;User /&gt;</code> component and style that component using a CSS module.</p>\n<ol>\n<li>Create the file for the CSS at <code class=\"language-text\">src/pages/about-css-modules.module.css</code>.</li>\n<li>Paste the following into the new file:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/pages/about-css-modules.module.css\"><pre class=\"language-css:title=src/pages/about-css-modules.module.css\"><code class=\"language-css:title=src/pages/about-css-modules.module.css\">.user {\n  display: flex;\n  align-items: center;\n  margin: 0 auto 12px auto;\n}\n\n.user:last-child {\n  margin-bottom: 0;\n}\n\n.avatar {\n  flex: 0 0 96px;\n  width: 96px;\n  height: 96px;\n  margin: 0;\n}\n\n.description {\n  flex: 1;\n  margin-left: 18px;\n  padding: 12px;\n}\n\n.username {\n  margin: 0 0 12px 0;\n  padding: 0;\n}\n\n.excerpt {\n  margin: 0;\n}</code></pre></div>\n<ol start=\"3\">\n<li>Import the new <code class=\"language-text\">src/pages/about-css-modules.module.css</code> file into the <code class=\"language-text\">about-css-modules.js</code> page you created earlier by editing the first few lines of the file like so:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=src/pages/about-css-modules.js\"><pre class=\"language-javascript:title=src/pages/about-css-modules.js\"><code class=\"language-javascript:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\n// highlight-next-line\nimport styles from &quot;./about-css-modules.module.css&quot;\nimport Container from &quot;../components/container&quot;\n\n// highlight-next-line\nconsole.log(styles)</code></pre></div>\n<p>The <code class=\"language-text\">console.log(styles)</code> code will log the resulting import so you can see the result of your processed <code class=\"language-text\">./about-css-modules.module.css</code> file. If you open the developer console (using e.g. Firefox or Chrome’s developer tools, often by the F12 key) in your browser, you’ll see:</p>\n<p><img src=\"css-modules-console.png\" alt=\"Import result of CSS module in console\"></p>\n<p>If you compare that to your CSS file, you’ll see that each class is now a key in the imported object pointing to a long string e.g. <code class=\"language-text\">avatar</code> points to <code class=\"language-text\">src-pages----about-css-modules-module---avatar---2lRF7</code>. These are the class names CSS Modules generates. They’re guaranteed to be unique across your site. And because you have to import them to use the classes, there’s never any question about where some CSS is being used.</p>\n<ol start=\"4\">\n<li>Create a new <code class=\"language-text\">&lt;User /&gt;</code> component inline in the <code class=\"language-text\">about-css-modules.js</code> page\ncomponent. Modify <code class=\"language-text\">about-css-modules.js</code> so it looks like the following:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/about-css-modules.js\"><pre class=\"language-jsx:title=src/pages/about-css-modules.js\"><code class=\"language-jsx:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\nimport styles from &quot;./about-css-modules.module.css&quot;\nimport Container from &quot;../components/container&quot;\n\nconsole.log(styles)\n\n// highlight-start\nconst User = props =&gt; (\n  &lt;div className={styles.user}&gt;\n    &lt;img src={props.avatar} className={styles.avatar} alt=&quot;&quot; /&gt;\n    &lt;div className={styles.description}&gt;\n      &lt;h2 className={styles.username}&gt;{props.username}&lt;/h2&gt;\n      &lt;p className={styles.excerpt}&gt;{props.excerpt}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n)\n// highlight-end\n\nexport default () =&gt; (\n  &lt;Container&gt;\n    &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n    &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n    {/* highlight-start */}\n    &lt;User\n      username=&quot;Jane Doe&quot;\n      avatar=&quot;https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg&quot;\n      excerpt=&quot;I&#39;m Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n    /&gt;\n    &lt;User\n      username=&quot;Bob Smith&quot;\n      avatar=&quot;https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg&quot;\n      excerpt=&quot;I&#39;m Bob Smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n    /&gt;\n    {/* highlight-end */}\n  &lt;/Container&gt;\n)</code></pre></div>\n<blockquote>\n<p>Tip: Generally, if you use a component in multiple places on a site, it should be in its own module file in the <code class=\"language-text\">components</code> directory. But, if it’s used only in one file, create it inline.</p>\n</blockquote>\n<p>The finished page should now look like:</p>\n<p><img src=\"css-modules-userlist.png\" alt=\"User list page with CSS modules\"></p>\n<h3>CSS-in-JS</h3>\n<p>CSS-in-JS is a component-oriented styling approach. Most generally, it is a pattern where <a href=\"https://reactjs.org/docs/faq-styling.html#what-is-css-in-js\">CSS is composed inline using JavaScript</a>.</p>\n<h4>Using CSS-in-JS with Gatsby</h4>\n<p>There are many different CSS-in-JS libraries and many of them have Gatsby plugins already. We won’t cover an example of CSS-in-JS in this initial tutorial, but we encourage you to <a href=\"/docs/styling/\">explore</a> what the ecosystem has to offer. There are mini-tutorials for two libraries, in particular, <a href=\"/docs/emotion/\">Emotion</a> and <a href=\"/docs/styled-components/\">Styled Components</a>.</p>\n<h4>Suggested reading on CSS-in-JS</h4>\n<p>If you’re interested in further reading, check out <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">Christopher “vjeux” Chedeau’s 2014 presentation that sparked this movement</a> as well as <a href=\"https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660\">Mark Dalgleish’s more recent post “A Unified Styling Language”</a>.</p>\n<h3>Other CSS options</h3>\n<p>Gatsby supports almost every possible styling option (if there isn’t a plugin yet for your favorite CSS option, <a href=\"/contributing/how-to-contribute/\">please contribute one!</a>)</p>\n<ul>\n<li><a href=\"/packages/gatsby-plugin-typography/\">Typography.js</a></li>\n<li><a href=\"/packages/gatsby-plugin-sass/\">Sass</a></li>\n<li><a href=\"/packages/gatsby-plugin-jss/\">JSS</a></li>\n<li><a href=\"/packages/gatsby-plugin-stylus/\">Stylus</a></li>\n<li><a href=\"/packages/gatsby-plugin-postcss/\">PostCSS</a></li>\n</ul>\n<p>and more!</p>\n<h2>What’s coming next?</h2>\n<p>Now continue on to <a href=\"/tutorial/part-three/\">part three of the tutorial</a>, where you’ll learn about Gatsby plugins and layout components.</p>","frontmatter":{"title":"Introduction to Styling in Gatsby","date":null,"description":null}}},"pageContext":{"slug":"/gatsby/introduction-to-styling-in-gatsby/index-en/","previous":{"fields":{"slug":"/gatsby/introduction-to-styling-in-gatsby/"},"frontmatter":{"title":"Введение в стилизацию на Gatsby"}},"next":{"fields":{"slug":"/github/pull-request-on-github/"},"frontmatter":{"title":"Как внести изменения в чужой проект c помощью Pull request'а на GitHub"}}}}}