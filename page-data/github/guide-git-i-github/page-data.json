{"componentChunkName":"component---src-templates-blog-post-js","path":"/github/guide-git-i-github/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"c1f21af2-b184-5179-bb13-77817b3cc129","excerpt":"Данный справочник является кратким конспектом из источника https://git-scm.com/book/ru/v2 и некоторых других ресурсов Открываем командную строку\nС помощью…","html":"<p>Данный справочник является кратким конспектом из источника <a href=\"https://git-scm.com/book/ru/v2\">https://git-scm.com/book/ru/v2</a> и некоторых других ресурсов</p>\n<p>Открываем командную строку\nС помощью команды cd переходим в нужную нам директорию проекта</p>\n<table>\n<thead>\n<tr>\n<th>Команда</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ git status</td>\n<td>показывает состояние файлов</td>\n</tr>\n<tr>\n<td>$ git init</td>\n<td>инициализирует Git-репозиторий (создается поддиректория .git)</td>\n</tr>\n<tr>\n<td>$ git add as.js</td>\n<td>добавляет (индексирует) файл as.js для следующего коммита</td>\n</tr>\n<tr>\n<td>$ git add .</td>\n<td>добавляет в индекс все файлы.</td>\n</tr>\n<tr>\n<td>$ git add -u</td>\n<td>добавляет в индекс все измененные файлы.</td>\n</tr>\n<tr>\n<td>$ git commit -m “first commit”</td>\n<td>фиксирует изменения с коментарием в кавычках (параметр -m указывает на коментарий)</td>\n</tr>\n<tr>\n<td>$ git commit -a -m “added new”</td>\n<td>параметра -a заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без git add</td>\n</tr>\n<tr>\n<td>$ git reset — path/file.cpp</td>\n<td>удаляет из индекса файл path/file.cpp.</td>\n</tr>\n<tr>\n<td>$ git rm —cached as.js</td>\n<td>удаляет файл as.js из индекса, не удаляя его в рабочей директории</td>\n</tr>\n<tr>\n<td>$ git rm -r —cached qsf</td>\n<td>удаляет каталог qsf (рекурсивно) из индекса, не удаляя его в рабочей директории</td>\n</tr>\n</tbody>\n</table>\n<h2>Ветвление</h2>\n<p><a href=\"https://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F\">https://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F</a></p>\n<table>\n<thead>\n<tr>\n<th>Команда</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ git branch</td>\n<td>выводит список имеющихся веток (символ * указывает ветку, на которую указывает HEAD т.е. ветку, на которой вы находитесь в настоящий момент)</td>\n</tr>\n<tr>\n<td>$ git branch dev</td>\n<td>создает ветку с именем dev (но не переключает вас на нее!)</td>\n</tr>\n<tr>\n<td>$ git branch -d dev</td>\n<td>удаляет ветку с именем dev</td>\n</tr>\n<tr>\n<td>$ git checkout dev</td>\n<td>переключает на ветку dev</td>\n</tr>\n<tr>\n<td>$ git checkout -b dev</td>\n<td>создает ветку dev и сразу переключается на нее</td>\n</tr>\n<tr>\n<td>$ git branch -v</td>\n<td>показывает последний коммит в каждой ветке</td>\n</tr>\n<tr>\n<td>$ git branch -m old new</td>\n<td>переименоввает локальную ветку с old на new</td>\n</tr>\n</tbody>\n</table>\n<h2>Слияние</h2>\n<p>Обратите внимание                   Перед тем как слить ветки, нужно с помощью команды $ git checkout &#x3C;name_branch> перейти в ту ветку, в которую будет производится слияние </p>\n<table>\n<thead>\n<tr>\n<th>Команда</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ git merge dev</td>\n<td>вливает ветку dev в текущую ветку</td>\n</tr>\n<tr>\n<td>$ git mergetool</td>\n<td>открывает графический инструмент для разрешения конфликтов</td>\n</tr>\n<tr>\n<td>$ git branch —merged</td>\n<td>показывает список веток, которые вы уже слили с текущей. Те ветки из этого списка, перед которыми нет символа *, можно смело удалять командой git branch -d; наработки из этих веток уже включены в другую ветку, так что ничего не потеряется.</td>\n</tr>\n<tr>\n<td>$ git branch —no-merged</td>\n<td>показывает список веток, содержащие наработки, которые вы пока ещё не слили в текущую ветку. Эти ветки невозможно удалить командой git branch -d</td>\n</tr>\n</tbody>\n</table>\n<h2>Удаленные репозитории</h2>\n<p>Каждый удаленный репозиторий имеет URL адрес и сокращенное имя</p>\n<table>\n<thead>\n<tr>\n<th>Команда</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ git remote</td>\n<td>Отображает сокращенные имена (мемы) удалённых репозиториев</td>\n</tr>\n<tr>\n<td>$ git remote -v</td>\n<td>Отображает сокращенные имена (мемы) удалённых репозиториев и соответствующие им URL</td>\n</tr>\n<tr>\n<td>$ git remote show og</td>\n<td>Отображает информацию об удалённом репозитории og</td>\n</tr>\n<tr>\n<td>$ git remote add og url</td>\n<td>Добавляет новый удалённый репозиторий по адресу url, которому дается сокращенное имя og. Это позволит в дальнейшем обращатся к удаленному репозиторию по имени (вместо url)</td>\n</tr>\n<tr>\n<td>$ git clone url</td>\n<td>Клонирует репозиторий из указанного адреса url</td>\n</tr>\n<tr>\n<td>$ git clone url asd</td>\n<td>Клонирует репозиторий из указанного адреса url и переименовывает в asd</td>\n</tr>\n<tr>\n<td>$ git push og dev</td>\n<td>Отправляет ветку dev на удаленный репозиторий og (og - это либо полный путь к удаленному репозиторию, либо его сокращенный мем). Эта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас есть права на запись, и если никто другой с тех пор не выполнял команду push. Если вы и кто-то ещё одновременно клонируете, затем он выполняет команду push, а затем команду push выполняете вы, то ваш push точно будет отклонён. Вам придётся сначала вытянуть (pull) их изменения и объединить с вашими. Только после этого вам будет позволено выполнить push.</td>\n</tr>\n<tr>\n<td>$ git push -u og dev</td>\n<td>Отправляет ветку dev на удаленный сервер og и связывает локальную ветку dev и ветку dev в удаленном репозитарии. То есть, после такой команды (которая выполняется единожды), можно будет отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера и удалённых веток.</td>\n</tr>\n<tr>\n<td>$ git fetch og</td>\n<td>Извлекает из удаленного репозитория og все изменения, которых нет в вашем локальном репозитории, но не сливает их с вашими наработками и не модифицирует то, над чем вы работаете в данный момент. Вам необходимо вручную слить эти данные с вашими, когда вы будете готовы с посощью команды merge.</td>\n</tr>\n<tr>\n<td>$ git push og —delete ser</td>\n<td>Удаляет ветку ser на сервере og. На самом деле, удаляется указатель на сервере. Как правило, Git-сервер оставит данные, пока не запустится сборщик мусора. Т. е., если ветка случайно была удалена, чаще всего ее легко восстановить.</td>\n</tr>\n<tr>\n<td>$ git remote rename kt oleg</td>\n<td>Переименовывает удаленный репозиторий kt в oleg</td>\n</tr>\n<tr>\n<td>$ git remote rm paul</td>\n<td>Удаляет ссылку на удаленный репозиторий. Это бывает нужно, например, если вы сменили сервер или больше не используете определённое зеркало, или, возможно, контрибьютор перестал быть активным</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8\">https://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8</a></p>","frontmatter":{"title":"Краткий справочник по командам Git","date":"20 May 2019","description":null}}},"pageContext":{"slug":"/github/guide-git-i-github/","previous":null,"next":{"fields":{"slug":"/Basic-Node-and-Express/"},"frontmatter":{"title":"Основы Node и Express"}}}}}