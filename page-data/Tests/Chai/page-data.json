{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Tests/Chai/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"4e40e838-203a-5b78-93e5-f56ed8d82d87","excerpt":"Мне попалась переведенная с английского статья, в которой описываются 11 инструментов и библиотек для тестирования React-компонентов. Не лишнем будет прочитать…","html":"<p>Мне попалась переведенная с английского статья, в которой описываются <a href=\"https://techrocks.ru/2019/07/12/11-react-testing-tools/\">11 инструментов и библиотек для тестирования React-компонентов</a>. Не лишнем будет прочитать ее прежде, чем продолжать читать далее.</p>\n<p>Источниками для данной статьи послужили: <a href=\"https://www.chaijs.com/guide/\">chaijs</a>, <a href=\"https://www.freecodecamp.org/learn/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/\">freecodecamp</a> и <a href=\"https://ru.nodejs.org/api/assert.html\">nodejs</a>.</p>\n<p>Chai – это библиотека, предоставляющая различные функции для проверки утверждений. Chai - это библиотека утверждений <a href=\"https://medium.com/@lucyhackwrench/%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-tdd-%D0%B8-bdd-%D0%BD%D0%B0-%D0%BF%D0%B0%D0%BB%D1%8C%D1%86%D0%B0%D1%85-%D0%B8-%D1%87%D1%82%D0%BE-%D0%B4%D0%BE%D0%BB%D0%B6%D0%B5%D0%BD-%D0%B7%D0%BD%D0%B0%D1%82%D1%8C-%D0%BE-%D0%BD%D0%B8%D1%85-%D1%84%D1%80%D0%BE%D0%BD%D1%82%D0%B5%D0%BD%D0%B4%D0%B5%D1%80-701a10e06bb9\">BDD/TDD</a> для node и браузера, которая может прекрасно сочетаться с любым тестовым фреймворком JavaScript, например, таким как,  <a href=\"https://mochajs.org\">Mocha</a> или <a href=\"https://jestjs.io/\">Jest</a>.</p>\n<p>Chai имеет несколько интерфейсов, которые позволяют разработчику выбрать наиболее удобный. Цепочечные стили <a href=\"https://ru.wikipedia.org/wiki/BDD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)\">BDD</a> обеспечивают выразительный язык и читаемый стиль, в то время как стиль <a href=\"https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\">TDD</a> assert обеспечивает более классическое ощущение.</p>\n<p>Пакет Chai устанавливается из npm:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install chai</code></pre></div>\n<p>Поскольку программы становятся все более сложными, вам нужно часто тестировать их, чтобы убедиться, что любой новый код, который вы добавляете, не нарушает первоначальную функциональность программы.</p>\n<h2>Изучение работы assert’ов JavaScript</h2>\n<p><code class=\"language-text\">assert.isNull(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> является <code class=\"language-text\">null</code>; если это так, возвращает <code class=\"language-text\">message</code>. Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">'никакой ошибки не было'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isNotNull(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> не является <code class=\"language-text\">null</code>; если это так, возвращает <code class=\"language-text\">message</code>. Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tea <span class=\"token operator\">=</span> <span class=\"token string\">'вкусный чай'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'отлично, пора пить чай!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Во все инструкции assert можно добавить второе необязательное сообщение. Оно будет включено в сообщения об ошибках, если  assert не пройдет. Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tea <span class=\"token operator\">=</span> <span class=\"token string\">'вкусный чай'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'отлично, пора пить чай!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'что-то пошло не так'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка определения переменной или функции</h2>\n<p><code class=\"language-text\">assert.isDefined(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> не является <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tea <span class=\"token operator\">=</span> <span class=\"token string\">'чашка чая'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isDefined</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'чай уже был определен'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isUndefined(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> не определено.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tea<span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'tea не определен'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Использование assert.isOK и assert.isNotOK</h2>\n<p><code class=\"language-text\">assert.isOk(object, [message])</code> будет проверять <code class=\"language-text\">object</code> на <a href=\"https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/Truthy\">истиное значение</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token string\">'everything'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'все в порядке'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'это не сработает'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isNotOk(object, [message])</code> будет проверять на <a href=\"https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/Falsy\">ложное значение</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotOk</span><span class=\"token punctuation\">(</span><span class=\"token string\">'everything'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'это не сработает'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotOk</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'это прокатит'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Тест на истиность</h2>\n<p><code class=\"language-text\">assert.isTrue(value, [message])</code> будет тестировать на логическое значение true</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> teaServed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>teaServed<span class=\"token punctuation\">,</span> <span class=\"token string\">'чай уже подан'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>еще примеры</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'тест пройдет с логическим значением true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'тест не пройдет со строковым значением '</span><span class=\"token boolean\">true</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'тест не пройдет с числовым значением 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isNotTrue(value, [message])</code> тест пройдет, если задано что угодно, кроме логического значения true.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> tea <span class=\"token operator\">=</span> <span class=\"token string\">'вкусный чай'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotTrue</span><span class=\"token punctuation\">(</span>tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'отлично, пора пить чай!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Использование нестрогого равенства и неравенства</h2>\n<p><code class=\"language-text\">assert.equal(actual, expected, [message])</code> утверждает, что объекты actual и expected нестрого равны (<code class=\"language-text\">==</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'== преобразует значения в строки'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notEqual(actual, expected, [message])</code> утверждает, что объекты actual и expected нестрого неравны (<code class=\"language-text\">!=</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'эти числа не равны'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Использование строгого равенства и неравенства</h2>\n<p><code class=\"language-text\">assert.strictEqual(actual, expected, [message])</code> утверждает, что объекты actual и expected строго равны <code class=\"language-text\">===</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'эти логические значения строго равны'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notStrictEqual(actual, expected, [message])</code> утверждает, что объекты actual и expected строго неравны <code class=\"language-text\">!==</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'не является строгим равенством'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Глубокое сравнение с помощью .deepEqual и .notDeepEqual</h2>\n<p><code class=\"language-text\">assert.deepEqual(actual, expected, [message])</code> утверждает, что объекты actual и expected полностью равны.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notDeepEqual(actual, expected, [message])</code> утверждает, что объекты actual и expected полностью неравны.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notDeepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token string\">'jasmine'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"порядок ключей не имеет значения\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notDeepEqual</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"положение элементов массива имеет значение !!\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Сравнение свойств двух элементов</h2>\n<p><code class=\"language-text\">assert.isAbove(valueToCheck, valueToBeAbove, [message])</code> утверждает, что <code class=\"language-text\">valueToCheck</code> больше (<code class=\"language-text\">></code>), чем <code class=\"language-text\">valueToBeAbove</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isAbove</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5 строго больше чем 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isAbove</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> число ПИ больше чем <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isBelow(valueToCheck, valueToBeBelow, [message])</code> утверждает, что <code class=\"language-text\">valueToCheck</code> меньше (<code class=\"language-text\">&lt;</code>), чем  <code class=\"language-text\">valueToBeBelow</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isBelow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3 меньше, чем 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isAtMost(valueToCheck, valueToBeAtMost, [message])</code> утверждает, что <code class=\"language-text\">valueToCheck</code> меньше или равен (<code class=\"language-text\">&lt;=</code>) <code class=\"language-text\">valueToBeAtMost</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtMost</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3 меньше или равно 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtMost</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4 меньше или равно 4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtMost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtMost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isAtLeast(valueToCheck, valueToBeAtLeast, [message])</code> утверждает, что <code class=\"language-text\">valueToCheck</code> больше или равен (<code class=\"language-text\">>=</code>) <code class=\"language-text\">valueToBeAtLeast</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5 больше или равно 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3 больше или равно 3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка на попадание значения в определенный диапазон</h2>\n<p><code class=\"language-text\">assert.approximately(actual, expected, delta, [message])</code> утверждает, что <code class=\"language-text\">actual</code> равен <code class=\"language-text\">expected</code>, в пределах диапазона +/- <code class=\"language-text\">delta</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">approximately</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'числа в диапазоне'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">weirdNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> delta <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">approximately</span><span class=\"token punctuation\">(</span><span class=\"token function\">weirdNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">approximately</span><span class=\"token punctuation\">(</span><span class=\"token function\">weirdNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка значения на массив</h2>\n<p><code class=\"language-text\">assert.isArray(value, [message])</code> утверждает, что value является массивом.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'зеленый'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'чай'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'длинный'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">,</span> <span class=\"token string\">'какой чай нам нужен?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isThisAnArray?'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'String.prototype.split() возвращает массив'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isNotArray(value, [message])</code> утверждает, что value не является массивом.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> menu <span class=\"token operator\">=</span> <span class=\"token string\">'зеленый|чай|длинный'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotArray</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">,</span> <span class=\"token string\">'какой чай нам нужен?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'indexOf возвращает число.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Нахождение значения в массиве, строке или объекте</h2>\n<p><code class=\"language-text\">assert.include(haystack, needle, [message])</code> утверждает, что <code class=\"language-text\">haystack</code> включает в себя <code class=\"language-text\">needle</code>. Может использоваться для утверждения, что значение содержится в массиве, подстрока содержится в строке или подмножество свойств содержится в объекте.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'массив содержит значение'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'лесной'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'лес'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'строка содержит подстроку'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">'universe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'объект содержит свойство'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Используется строгое равенство (<code class=\"language-text\">===</code>). Если утверждается, что значение включено в массив, выполняется поиск элемента, строго равного данному значению. Если утверждается подмножество свойств в объекте производится поиск объекта по заданным ключам свойств, проверяя, что каждый из них присутствует и строго равен заданному значению свойства. Например:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> obj2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> obj1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> obj2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> obj2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notInclude(haystack, needle, [message])</code> утверждает, что <code class=\"language-text\">haystack</code> не включает в себя <code class=\"language-text\">needle</code>. Может использоваться для утверждения отсутствия значения в массиве, подстроки в строке или подмножества свойств в объекте.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notInclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"массив не содержит значение\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notInclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"строка не содержит подстроку\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notInclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">'universe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'baz'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'объект не содержит свойство'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка значения на строку</h2>\n<p><code class=\"language-text\">assert.isString(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> является строкой.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> teaOrder <span class=\"token operator\">=</span> <span class=\"token string\">'чай'</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>teaOrder<span class=\"token punctuation\">,</span> <span class=\"token string\">'размещенный заказ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.isNotString(value, [message])</code> утверждает, что <code class=\"language-text\">value</code> не является строкой.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> teaOrder <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">isNotString</span><span class=\"token punctuation\">(</span>teaOrder<span class=\"token punctuation\">,</span> <span class=\"token string\">'размещенный заказ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Использование регулярных выражений для проверки строк</h2>\n<p><code class=\"language-text\">assert.match(value, regexp, [message])</code> утверждает, что <code class=\"language-text\">value</code> соответствует регулярному выражению <code class=\"language-text\">regexp</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^foo</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'регулярное выражение совпадает'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notMatch(value, regexp, [message])</code> утверждает, что <code class=\"language-text\">value</code> не соответствует регулярному выражению <code class=\"language-text\">regexp</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^foo</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'регулярное выражение не совпадает'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">formatPeople</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'# name: '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">', age: '</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span>  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^#\\sname\\:\\s[\\w\\s]+,\\sage\\:\\s\\d+\\s?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notMatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Paul Smith III'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'twenty-four'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка наличия свойств у объекта</h2>\n<p><code class=\"language-text\">assert.property(object, property, [message])</code> утверждает, что <code class=\"language-text\">object</code> имеет прямое или наследуемое свойство <code class=\"language-text\">property</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">green</span><span class=\"token operator\">:</span> <span class=\"token string\">'matcha'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">green</span><span class=\"token operator\">:</span> <span class=\"token string\">'matcha'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toString'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notProperty(object, property, [message])</code> утверждает, что <code class=\"language-text\">object</code> не имеет прямого или наследуемого свойства <code class=\"language-text\">property</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">green</span><span class=\"token operator\">:</span> <span class=\"token string\">'matcha'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coffee'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка значения на соответствие определенному типу структуры данных</h2>\n<p><code class=\"language-text\">assert.typeOf(value, name, [message])</code> утверждает, что тип <code class=\"language-text\">value</code> - это <code class=\"language-text\">name</code>, как определено <code class=\"language-text\">Object.prototype.toString</code>.</p>\n<p>#typeOf утверждает, что тип значения - это заданная строка, определяемая <code class=\"language-text\">Object.prototype.toString</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tea</span><span class=\"token operator\">:</span> <span class=\"token string\">'chai'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем объект'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jasmine'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'array'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем массив'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем строка'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">tea</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'regexp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем регулярное выражение'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'null'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем нуль'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'мы имеем undefined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notTypeOf(value, name, [message])</code> утверждает, что тип <code class=\"language-text\">value</code> - это не <code class=\"language-text\">name</code>, как определено <code class=\"language-text\">Object.prototype.toString</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">notTypeOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'строки не являются числами'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Проверка, является ли объект экземпляром конструктора</h2>\n<p><code class=\"language-text\">assert.instanceOf(object, constructor, [message])</code> утверждает, что <code class=\"language-text\">object</code> является экземпляром <code class=\"language-text\">constructor</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Tea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> chai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tea</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>chai<span class=\"token punctuation\">,</span> Tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'chai является экземпляром tea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">assert.notInstanceOf(object, constructor, [message])</code> утверждает, что <code class=\"language-text\">object</code> не является экземпляром <code class=\"language-text\">constructor</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Tea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">,</span> chai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notInstanceOf</span><span class=\"token punctuation\">(</span>chai<span class=\"token punctuation\">,</span> Tea<span class=\"token punctuation\">,</span> <span class=\"token string\">'chai не является экземпляром tea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Есть и другие assert’ы, например: <code class=\"language-text\">.isNaN()</code>, <code class=\"language-text\">.isBoolean()</code>, и многие другие. Почти все assert’ы в библиотеке chai имеют свой отрицательный аналог - например: <code class=\"language-text\">.isNotBoolean()</code>. Более полная информация по API assert’ам находится <a href=\"https://www.chaijs.com/api/assert/\">здесь</a>.</p>","frontmatter":{"title":"Тестирование кода с помощью библиотеки Chai","date":"22 April 2020","description":"Chai - это библиотека тестирования JavaScript, которая помогает проверить, что после внесения изменений в код программа все еще ведет себя так, как нужно. Используя Chai, можно написать тесты, описывающие требования к программе, и посмотреть, соответствует ли она им."}}},"pageContext":{"slug":"/Tests/Chai/","previous":{"fields":{"slug":"/Express/bcrypt/"},"frontmatter":{"title":"BCrypt хэширование"}},"next":{"fields":{"slug":"/Express/Shablonizator-Pug/"},"frontmatter":{"title":"Шаблонизатор PugJS"}}}},
    "staticQueryHashes": ["63159454","71715879"]}