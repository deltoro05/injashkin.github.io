{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/MongoDB-and-Mongoose/timestamp-microservice/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"498637f7-fe2b-5591-aeab-8585b4f084d6","excerpt":"Данная статья является моим учебным заданием, которое я выполнил обучаясь на FreeCodeCamp Задание Нужно создать JavaScript приложение полного цикла, которое…","html":"<p>Данная статья является моим учебным заданием, которое я выполнил обучаясь на <a href=\"https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/timestamp-microservice\">FreeCodeCamp</a></p>\n<h2>Задание</h2>\n<p>Нужно создать JavaScript приложение полного цикла, которое функционально похоже на это: <a href=\"https://curse-arrow.glitch.me/\">https://curse-arrow.glitch.me/</a>.</p>\n<p>Если ввести в поисковую строку браузера, например, ссылку: <code class=\"language-text\">https://curse-arrow.glitch.me/api/timestamp/2015-12-25</code>, то будет выведено следующее:</p>\n<p>{“unix”:1451001600000,“utc”:“Fri, 25 Dec 2015 00:00:00 GMT”}</p>\n<p>а если ввести такую ссылку: <code class=\"language-text\">https://curse-arrow.glitch.me/api/timestamp/1450137600000</code>, то будет выведено следующее:</p>\n<p>{“unix”:1450137600000,“utc”:“Tue, 15 Dec 2015 00:00:00 GMT”}</p>\n<p>Написать код можно на облачном сервисе Glitch. Чтобы данный проект прошел тесты на freecodecamp.org после его завершения нужно скопировать публичный url с Glitch (главной страницы приложения) на <a href=\"https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/timestamp-microservice\">эту страницу</a>. Можно написать свой проект на другой платформе, но он должен быть публично виден для тестирования.</p>\n<p>Запустите этот проект на Glitch по <a href=\"https://glitch.com/edit/#!/remix/clone-from-repo?REPO_URL=https://github.com/freeCodeCamp/boilerplate-project-timestamp/\">этой ссылке</a> или клонируйте <a href=\"https://github.com/freeCodeCamp/boilerplate-project-timestamp/\">этот репозиторий</a> с GitHub!</p>\n<ol>\n<li>\n<p>Конечной точкой API является <code class=\"language-text\">GET [project_url]/api/timestamp/:строка_даты?</code></p>\n</li>\n<li>\n<p>Строка даты считается допустимой, если может быть успешно проанализирована с помощью <code class=\"language-text\">new Date(date_string)</code> (JS). Обратите внимание, что метка времени unix должна быть целым числом (не строкой), задающая миллисекунды. В нашем тесте мы будем использовать строки дат, соответствующие стандарту ISO-8601 (например, “2016-11-20”), поскольку это обеспечит временную метку UTC.</p>\n</li>\n<li>\n<p>Если строка даты пуста, она должна быть эквивалентна триггеру <code class=\"language-text\">new Date()</code>, то есть служба использует текущую метку времени.</p>\n</li>\n<li>\n<p>Если строка даты допустима, api возвращает JSON, имеющий структуру <code class=\"language-text\">{\"unix\": &lt;date.getTime()>, \"utc\" : &lt;date.toUTCString()> }</code> например, <code class=\"language-text\">{\"unix\": 1479663089000 ,\"utc\": \"Sun, 20 Nov 2016 17:31:29 GMT\"}</code>.</p>\n</li>\n<li>\n<p>Если строка даты недопустима, api возвращает JSON, имеющий структуру <code class=\"language-text\">{\"unix\": null, \"utc\" : \"Invalid Date\" }</code>. Это то, что вы получаете от функций манипулирования датой, используемых выше.</p>\n</li>\n</ol>\n<p>Микросервис должен обрабатывать правильную дату и возвращать правильную метку времени unix и правильную строку UTC\nМикросервис должен обрабатывать правильную дату unix и возвращать правильную метку времени unix\nМикросервис должен вернуть сообщение об ошибке для недопустимой даты\nМикросервис должен обрабатывать пустой параметр даты и возвращать текущее время в формате unix и текущее время в формате UTC</p>\n<h2>Решение</h2>\n<p>Исходный код моего микросервиса можно просмотреть на <a href=\"https://github.com/injashkin/timestamp-microservice\">GitHub</a></p>\n<p>Протестировать работу моего микросервиса можно здесь: <a href=\"https://injashkin-timestamp-microservice.glitch.me/api/timestamp/\">https://injashkin-timestamp-microservice.glitch.me/api/timestamp/</a></p>","frontmatter":{"title":"Обработка даты и времени из GET запросов","date":"18 January 2020","description":"Как обработать GET запросы. Микросервис возвращает время unix и utc в формате JSON"}}},"pageContext":{"slug":"/MongoDB-and-Mongoose/timestamp-microservice/","previous":{"fields":{"slug":"/MongoDB-and-Mongoose/MongoDB-and-Mongoose/"},"frontmatter":{"title":"Основы MongoDB и Mongoose"}},"next":{"fields":{"slug":"/MongoDB-and-Mongoose/request-header-parser-microservice/"},"frontmatter":{"title":"Парсер заголовков запросов, написанный на JavaScript"}}}},
    "staticQueryHashes": ["63159454","71715879"]}