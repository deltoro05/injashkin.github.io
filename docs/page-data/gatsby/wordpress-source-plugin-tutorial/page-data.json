{"componentChunkName":"component---src-templates-blog-post-js","path":"/gatsby/wordpress-source-plugin-tutorial/","result":{"data":{"site":{"siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"064100c6-c30f-58f3-9dad-8477e1978130","excerpt":"Как создать сайт с данными, полученными из WordPress Перевод статьи WordPress Source Plugin Tutorial. Что охватывает это руководство: В этом руководстве вы…","html":"<h2>Как создать сайт с данными, полученными из WordPress</h2>\n<p>Перевод статьи <a href=\"https://www.gatsbyjs.org/tutorial/wordpress-source-plugin-tutorial/#how-to-create-a-site-with-data-pulled-from-wordpress\">WordPress Source Plugin Tutorial</a>.</p>\n<h3>Что охватывает это руководство:</h3>\n<p>В этом руководстве вы установите плагин <code class=\"language-text\">gatsby-source-wordpress</code>, который извлечет данные и изображения из установленного WordPress на Gatsby сайт и визуализирует эти данные. Этот <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-wordpress\">демо-сайт на WordPress + Gatsby </a> содержит исходный код сайта, похожего на тот, что вы построите в этом руководстве, хотя в нем отсутствуют изображения. Их вы добавите изучив руководство <a href=\"https://www.gatsbyjs.org/tutorial/wordpress-image-tutorial/\">Добавление изображений на сайт WordPress</a>.</p>\n<h4>Для тех, кто предпочитает GraphQL</h4>\n<p>Если вы предпочитаете использовать GraphQL, то существует плагин <a href=\"https://github.com/wp-graphql/wp-graphql\">wp-graphql</a>, который легко отображает как стандартные, так и пользовательские данные в WordPress.</p>\n<p>В плагине wp-graphql поддерживаются те же схемы аутентификации, что и в WP-API. Плагин wp-graphql можно использовать совместно с плагином <a href=\"https://www.gatsbyjs.org/packages/gatsby-source-graphql/\">gatsby-source-graphql</a>.</p>\n<h2>Зачем это руководство?</h2>\n<p>В этом руководстве вы освоите азы по подключению сайта Gatsby к CMS, извлечению данных и использованию React для визуализации этих данных на сайте изящными способами.</p>\n<p>Если вы хотите посмотреть на растущее число доступных source плагинов, то в <a href=\"https://www.gatsbyjs.org/plugins/?=source\">Библиотеке плагинов Gatsby</a> в строке поиска введите “source”.</p>\n<h3>Создание сайта с помощью плагина <code class=\"language-text\">gatsby-source-wordpress</code></h3>\n<p>Создайте новый проект Gatsby и перейдите в каталог этого проекта:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby new wordpress-tutorial-site\n<span class=\"token builtin class-name\">cd</span> wordpress-tutorial-site</code></pre></div>\n<p>Установите плагин <code class=\"language-text\">gatsby-source-wordpress</code>. Дополнительные сведения о функциях плагина и примерах запросов GraphQL, не включенных в этот учебник, см. <a href=\"https://www.gatsbyjs.org/packages/gatsby-source-wordpress/?=wordpress\">В файле README плагина <code class=\"language-text\">gatsby-source-wordpress</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gatsby-source-wordpress</code></pre></div>\n<p>Добавьте плагин <code class=\"language-text\">gatsby-source-wordpress</code> в файл <code class=\"language-text\">gatsby-config.js</code> используя следующий код, который вы также найдете в <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/gatsby-config.js\">исходном коде демо-сайта</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=gatsby-config.js\"><pre class=\"language-js:title=gatsby-config.js\"><code class=\"language-js:title=gatsby-config.js\">module.exports = {\n  siteMetadata: {\n    title: `Учебник Gatsby WordPress`,\n    description: `Пример, позволяющий понять, как получить исходные данные из WordPress.`,\n    author: `@gatsbyjs`,\n  },\n  plugins: [\n    // https://public-api.wordpress.com/wp/v2/sites/gatsbyjsexamplewordpress.wordpress.com/pages/\n    /*\n     * Уровень обработки данных Gatsby начинается с плагинов &quot;source&quot;\n     * Здесь сайт берет данные из WordPress.\n     */\n    // highlight-start\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        /*\n         * Базовый URL-адрес сайта WordPress без протокола и слеша в конце. Это обязательно.\n         * Например : &#39;demo.wp-api.org&#39; или &#39;www.example-site.com&#39;\n         */\n        baseUrl: `live-gatbsyjswp.pantheonsite.io`,\n        // Протокол. Может быть http или https.\n        protocol: `https`,\n        // Указывает, будет ли сайт размещен на wordpress.com.\n        // Если false, то подразумевается, что сайт размещен на отдельном хостинге.\n        // Если true, то source плагин будет содержаться на wordpress.com используя JSON REST API V2.\n        // Если сайт размещен на wordpress.org, то установите это значение в false.\n        hostingWPCOM: false,\n        // Если useACF - true, то source плагин попытается импортировать содержимое WordPress ACF Plugin.\n        // Эта функция непроверена для сайтов, размещенных на WordPress.com\n        useACF: true,\n      },\n    },\n    // highlight-end\n    /**\n     * Следующие плагины не требуются для gatsby-source-wordpress,\n     * но они нам нужны, чтобы стартер по умолчанию, который мы установили выше, продолжал работать.\n     **/\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // Этот путь находится относительно корня сайта.\n      },\n    },\n  ],\n}</code></pre></div>\n<h3>Создание GraphQL запросов, которые извлекают данные из WordPress</h3>\n<p>Теперь вы можете создать запрос GraphQL, чтобы получить некоторые данные с сайта WordPress. Вы создадите запрос, который извлечет из блога заголовки постов, дату их публикации и содержимое.</p>\n<p>Выполните:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby develop</code></pre></div>\n<p>Перейдите в браузере по ссылке <code class=\"language-text\">http://localhost:8000</code>, где увидите сайт. Перейдите на <code class=\"language-text\">http://localhost:8000/___graphql</code>, где сможете создавать запросы GraphQL.</p>\n<p>В качестве упражнения попробуйте повторно создать следующие запросы в эксплорере GraphiQL. Этот запрос будет извлекать содержимое поста из блога WordPress:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">allWordpressPage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">id</span>\n        <span class=\"token property\">title</span>\n        <span class=\"token property\">excerpt</span>\n        <span class=\"token property\">slug</span>\n        <span class=\"token property-query\">date</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">formatString</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MMMM DD, YYYY\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Следующий запрос приведет к получению отсортированного списка записей в блоге:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">allWordpressPost</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token property\">date</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">title</span>\n        <span class=\"token property\">excerpt</span>\n        <span class=\"token property\">slug</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Рендеринг записей блога в <code class=\"language-text\">index.js</code></h2>\n<p>Теперь, когда вы создали запросы GraphQL, которые извлекают нужные данные, вы будете использовать второй запрос для создания списка отсортированных заголовков постов на главной странице сайта. Вот компонент главной страницы <code class=\"language-text\">src/pages/index.js</code>, который должен выглядеть так:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/index.js\"><pre class=\"language-jsx:title=src/pages/index.js\"><code class=\"language-jsx:title=src/pages/index.js\">import React from &quot;react&quot;\nimport { graphql } from &quot;gatsby&quot;\nimport Layout from &quot;../components/layout&quot;\nimport SEO from &quot;../components/seo&quot;\n\nexport default ({ data }) =&gt; {\n  //highlight-line\n  return (\n    &lt;Layout&gt;\n      &lt;SEO title=&quot;home&quot; /&gt;\n      //highlight-start\n      &lt;h1&gt;My WordPress Blog&lt;/h1&gt;\n      &lt;h4&gt;Posts&lt;/h4&gt;\n      {data.allWordpressPost.edges.map(({ node }) =&gt; (\n        &lt;div&gt;\n          &lt;p&gt;{node.title}&lt;/p&gt;\n          &lt;div dangerouslySetInnerHTML={{ __html: node.excerpt }} /&gt;\n        &lt;/div&gt;\n      ))}\n      //highlight-end\n    &lt;/Layout&gt;\n  )\n}\n\n//highlight-start\nexport const pageQuery = graphql`\n  query {\n    allWordpressPost(sort: { fields: [date] }) {\n      edges {\n        node {\n          title\n          excerpt\n          slug\n        }\n      }\n    }\n  }\n`\n//highlight-end</code></pre></div>\n<p>Сохраните эти изменения и перейдите на <code class=\"language-text\">http://localhost:8000</code> чтобы увидеть вашу новую домашнюю страницу со списком отсортированных постов в блоге!</p>\n<p><img src=\"https://www.gatsbyjs.org/static/3ae34e1e5b9f3fbdea14040a88136814/1deb5/wordpress-source-plugin-home.jpg\" alt=\"Главная страница WordPress после запроса\"></p>\n<h2>Создание страниц для каждого поста блога и ссылки на них</h2>\n<p>Индексная страница с заголовком поста и отрывком - это здорово, но вы также должны создать страницы для любого поста в блоге и ссылаться на них из файла <code class=\"language-text\">index.js</code>.</p>\n<p>Для этого необходимо:</p>\n<ol>\n<li>Создать страницы для каждой поста в блоге</li>\n<li>Связать заголовок на странице index со страницей поста.</li>\n</ol>\n<p>Если вы еще этого не сделали, прочтите <a href=\"https://www.gatsbyjs.org/tutorial/part-seven/\">Часть 7</a> основного руководства, поскольку оно проходит через концепцию и примеры этого процесса используя Markdown вместо WordPress.</p>\n<h3>Создание страниц для каждого поста в блоге.</h3>\n<p>В части 7 руководства первым шагом в создании страниц является создание слагов для файлов markdown. Поскольку вы используете WordPress, а не файлы Markdown, вы можете захватить слаги, которые возвращаются из вызова API к источнику WordPress. Вы можете пропустить создание слагов, так как они у вас уже есть.</p>\n<p>Откройте файл <code class=\"language-text\">gatsby-node.js</code> в корне проекта (он должен быть пустым, за исключением некоторых комментариев) и добавьте следующее:</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=gatsby-node.js\"><pre class=\"language-js:title=gatsby-node.js\"><code class=\"language-js:title=gatsby-node.js\">const path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) =&gt; {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWordpressPost(sort: { fields: [date] }) {\n        edges {\n          node {\n            title\n            excerpt\n            content\n            slug\n          }\n        }\n      }\n    }\n  `).then(result =&gt; {\n    console.log(JSON.stringify(result, null, 4))\n  })\n}</code></pre></div>\n<p>Затем <a href=\"https://www.gatsbyjs.org/tutorial/part-zero/#view-your-site-locally\">остановите и перезагрузите</a> среду разработки <code class=\"language-text\">gatsby develop</code>. В терминале, вы должны увидеть два поста, выведенных как объекты:</p>\n<p><img src=\"https://www.gatsbyjs.org/static/3293912ec15e382170fa7e07a8c112c7/28be2/wordpress-source-plugin-log.jpg\" alt=\"Два поста выведенные в терминал\"></p>\n<p>Как объяснено в части 7 руководства, этот экспорт <code class=\"language-text\">createPages</code> является одной из “рабочих лошадок” Gatsby и позволяет нам создавать посты в блоге (или страницы, или пользовательские типы записей и т. д.) из установки WordPress.</p>\n<p>Однако перед созданием постов в блоге необходимо указать шаблон для построения страниц.</p>\n<p>В каталоге <code class=\"language-text\">src</code> создайте каталог с именем <code class=\"language-text\">templates</code>, а в нем создайте файл <code class=\"language-text\">blog-post.js</code>. В этот файл вставьте следующее:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/templates/blog-post.js\"><pre class=\"language-jsx:title=src/templates/blog-post.js\"><code class=\"language-jsx:title=src/templates/blog-post.js\">import React from &quot;react&quot;\nimport Layout from &quot;../components/layout&quot;\nimport { graphql } from &quot;gatsby&quot;\n\nexport default ({ data }) =&gt; {\n  const post = data.allWordpressPost.edges[0].node\n  console.log(post)\n  return (\n    &lt;Layout&gt;\n      &lt;div&gt;\n        &lt;h1&gt;{post.title}&lt;/h1&gt;\n        &lt;div dangerouslySetInnerHTML={{ __html: post.content }} /&gt;\n      &lt;/div&gt;\n    &lt;/Layout&gt;\n  )\n}\nexport const query = graphql`\n  query($slug: String!) {\n    allWordpressPost(filter: { slug: { eq: $slug } }) {\n      edges {\n        node {\n          title\n          content\n        }\n      }\n    }\n  }\n`</code></pre></div>\n<p>Что делает этот файл? После импорта зависимостей он создает макет поста с помощью JSX. Он оборачивает все в компоненте <code class=\"language-text\">Layout</code>, поэтому стиль одинаков по всему сайту. Затем он добавляет заголовок сообщения и содержимое сообщения. Вы можете добавить все, что хотите, и можете запросить здесь, например, изображение объекта, мета-запись, пользовательские поля и т. д.</p>\n<p>Ниже вы можете увидеть запрос GraphQL, вызывающий конкретную запись на основе <code class=\"language-text\">$slug</code>. Эта переменная передается в шаблон <code class=\"language-text\">blog-post.js</code>, когда страница создается в <code class=\"language-text\">gatsby-node.js</code>. Для этого добавьте следующий код в файл <code class=\"language-text\">gatsby-node.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=gatsby-node.js\"><pre class=\"language-js:title=gatsby-node.js\"><code class=\"language-js:title=gatsby-node.js\">const path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) =&gt; {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWordpressPost(sort: { fields: [date] }) {\n        edges {\n          node {\n            title\n            excerpt\n            content\n            slug\n          }\n        }\n      }\n    }\n  `).then(result =&gt; {\n    //highlight-start\n    result.data.allWordpressPost.edges.forEach(({ node }) =&gt; {\n      createPage({\n        path: node.slug,\n        component: path.resolve(`./src/templates/blog-post.js`),\n        context: {\n          // This is the $slug variable\n          // passed to blog-post.js\n          slug: node.slug,\n        },\n      })\n    })\n    //highlight-end\n  })\n}</code></pre></div>\n<p>Остановите и запустите среду разработки снова, используя <code class=\"language-text\">gatsby develop</code>. Когда вы это сделаете, то не увидите изменений на индексной странице сайта, но если перейдете на страницу 404, например <code class=\"language-text\">http://localhost:8000/asdf</code>, увидите два созданных поста и возможность нажать на них, чтобы перейти к примеру поста:</p>\n<p><img src=\"https://www.gatsbyjs.org/4293822ecf92f5dfc62eef6c01870224/wordpress-source-plugin-sample-post-links.gif\" alt=\"Пример ссылок на посты\"></p>\n<p>Но никому не нравится заходить на страницу 404, чтобы найти пост в блоге! Итак, давайте свяжем их с домашней страницей.</p>\n<h3>Связывание поста с главной страницей.</h3>\n<p>Поскольку вы уже имеете структуру и запрос для страницы <code class=\"language-text\">index.js</code>, то используйте компонент <code class=\"language-text\">Link</code> для обертывания заголовков.</p>\n<p>Откройте <code class=\"language-text\">src/pages/index.js</code> еще раз и добавьте следующее:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/index.js\"><pre class=\"language-jsx:title=src/pages/index.js\"><code class=\"language-jsx:title=src/pages/index.js\">import React from &quot;react&quot;\nimport { Link, graphql } from &quot;gatsby&quot; //highlight-line\nimport Layout from &quot;../components/layout&quot;\nimport SEO from &quot;../components/seo&quot;\n\nexport default ({ data }) =&gt; {\n  return (\n    &lt;Layout&gt;\n      &lt;SEO title=&quot;home&quot; /&gt;\n      &lt;h1&gt;My WordPress Blog&lt;/h1&gt;\n      &lt;h4&gt;Posts&lt;/h4&gt;\n      {data.allWordpressPost.edges.map(({ node }) =&gt; (\n        &lt;div key={node.slug}&gt;\n          //highlight-start\n          &lt;Link to={node.slug}&gt;\n            &lt;p&gt;{node.title}&lt;/p&gt;\n          &lt;/Link&gt;\n          //highlight-end\n          &lt;div dangerouslySetInnerHTML={{ __html: node.excerpt }} /&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/Layout&gt;\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allWordpressPost(sort: { fields: [date] }) {\n      edges {\n        node {\n          title\n          excerpt\n          slug\n        }\n      }\n    }\n  }\n`</code></pre></div>\n<p>Когда вы обернете заголовок в компоненте <code class=\"language-text\">Link</code> и сошлетесь на слаг поста, Gatsby добавит немного магии в ссылку, предварительно загрузит ее и сделает переход между страницами невероятно быстрым:</p>\n<p><img src=\"https://www.gatsbyjs.org/0b343004a523df5633da47bed95eecab/wordpress-source-plugin-home-to-post-links.gif\" alt=\"Конечный продукт со ссылками с главной страницы на посты в блоге\"></p>\n<h3>Заканчиваю работу.</h3>\n<p>Вы можете применить ту же процедуру вызывая и создавая страницы, пользовательские типы записей, пользовательские поля, таксономии и прочий интересный и гибкий контент, которым славится WordPress.</p>","frontmatter":{"title":"Руководство по плагину WordPress Source","date":"10 April 2020","update":null,"description":"Руководство по установке и работе с плагином `gatsby-source-wordpress`, который позволяет извлекать данные из WordPress и использовать на Gatsby сайте"}}},"pageContext":{"slug":"/gatsby/wordpress-source-plugin-tutorial/","previous":{"fields":{"slug":"/gatsby/nastrojka-sredy-razrabotki-dlya-frejmvorka-gatsby/"},"frontmatter":{"title":"Руководство по Gatsby. Настройка среды разработки."}},"next":{"fields":{"slug":"/Express/HelmetJS/"},"frontmatter":{"title":"Информационная безопасность с HelmetJS"}}}},"staticQueryHashes":["3913406117","63159454"]}