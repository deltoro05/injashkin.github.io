{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/gatsby/introduction-to-styling-in-gatsby/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"b90c36d7-ab58-5cca-81b3-bf37f58a6625","excerpt":"Данная статья - является моим вольным переводом официального источника: https://www.gatsbyjs.org/tutorial/part-two/ Добро пожаловать во вторую часть учебника…","html":"<p>Данная статья - является моим вольным переводом официального источника: <a href=\"https://www.gatsbyjs.org/tutorial/part-two/\">https://www.gatsbyjs.org/tutorial/part-two/</a></p>\n<p>Добро пожаловать во вторую часть учебника Gatsby!</p>\n<h2>Что в этой статье?</h2>\n<p>Здесь вы изучите варианты оформления веб-сайтов Gatsby и глубже погрузитесь в использование компонентов React для создания сайтов.</p>\n<h2>Использование глобальных стилей</h2>\n<p>Каждый сайт имеет какой-то глобальный стиль. Он включает в себя такие вещи, как типографика сайта и фоновые цвета. Эти стили задают общее ощущение объекта - так же, как цвет и текстура стены задают общее ощущение комнаты.</p>\n<h3>Создание глобальных стилей с помощью стандартных CSS-файлов</h3>\n<p>Один из самых простых способов добавления глобальных стилей на сайт — это использование глобальной таблицы стилей <code class=\"language-text\">.css</code>.</p>\n<h4>Создание нового Gatsby сайта</h4>\n<p>Начните с создания нового сайта Gatsby. Возможно, лучше всего (особенно если вы новичок в командной строке) закрыть окна терминала, которые вы использовали для <a href=\"/tutorial/part-one/\">части первой</a>, и начать новый сеанс терминала для части второй.</p>\n<p>Откройте новое окно терминала, создайте новый сайт “hello world” Gatsby в каталоге под названием <code class=\"language-text\">tutorial-part-two</code>, а затем перейдите в этот новый каталог:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby new tutorial-part-two https://github.com/gatsbyjs/gatsby-starter-hello-world\n<span class=\"token builtin class-name\">cd</span> tutorial-part-two</code></pre></div>\n<p>Теперь у вас есть новый сайт Gatsby (основанный на Gatsby стартере “hello world”) со следующей структурой:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js</code></pre></div>\n<h4>Добавление стилей в файл css</h4>\n<ol>\n<li>Создайте файл <code class=\"language-text\">.css</code> в новом проекте:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> src\n<span class=\"token function\">mkdir</span> styles\n<span class=\"token builtin class-name\">cd</span> styles\n<span class=\"token function\">touch</span> global.css</code></pre></div>\n<p>Теперь у вас должна быть такая структура:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js\n│   └── styles\n│       └── global.css</code></pre></div>\n<ol start=\"2\">\n<li>Определим некоторые стили в файле <code class=\"language-text\">global.css</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/styles/global.css\"><pre class=\"language-css:title=src/styles/global.css\"><code class=\"language-css:title=src/styles/global.css\">html {\n  background-color: lavenderblush;\n}</code></pre></div>\n<blockquote>\n<p>Примечание: размещение файла css в папке <code class=\"language-text\">/src/styles/</code> является произвольным.</p>\n</blockquote>\n<h4>Включение таблицы стилей в <code class=\"language-text\">gatsby-browser.js</code></h4>\n<ol>\n<li>Создайте <code class=\"language-text\">gatsby-browser.js</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token function\">touch</span> gatsby-browser.js</code></pre></div>\n<p>Файловая структура вашего проекта теперь должна выглядеть следующим образом:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── package.json\n├── src\n│   └── pages\n│       └── index.js\n│   └── styles\n│       └── global.css\n├── gatsby-browser.js</code></pre></div>\n<blockquote>\n<p>Файл <code class=\"language-text\">gatsby-browser.js</code> - один из немногих специальных файлов, которые ищет и использует (если они существуют) Gatsby. Здесь имя файла <strong>должно</strong> быть именно таким. Если вы хотите узнать больше, просмотрите <a href=\"https://www.gatsbyjs.org/docs/browser-apis/\">эти документы</a>.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Импортируйте недавно созданную таблицу стилей в файл <code class=\"language-text\">gatsby-browser.js</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=gatsby-browser.js\"><pre class=\"language-javascript:title=gatsby-browser.js\"><code class=\"language-javascript:title=gatsby-browser.js\">import &quot;./src/styles/global.css&quot;\n\n// or:\n// require(&#39;./src/styles/global.css&#39;)</code></pre></div>\n<blockquote>\n<p>Примечание: на CommonJS (<code class=\"language-text\">require</code>) и ES Module (<code class=\"language-text\">import</code>)синтаксис работы здесь. Если вы не уверены, что выбрать, <code class=\"language-text\">import</code> обычно является хорошим значением по умолчанию. При работе с файлами, которые однако выполняются только в среде Node.js (как <code class=\"language-text\">gatsby-node.js</code>), <code class=\"language-text\">require</code> нужно будет использовать.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Запустите сервер разработки:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gatsby develop</code></pre></div>\n<p>Если вы посмотрите на свой проект в браузере, вы увидите лавандовый фон, примененный к стартеру “hello world”:</p>\n<p><img src=\"global-css.png\" alt=\"Lavender Hello World!\"></p>\n<blockquote>\n<p>Совет: эта часть урока была посвящена самому быстрому и простому способу начать стилизацию сайта Gatsby - прямому импорту стандартных CSS-файлов с помощью <code class=\"language-text\">gatsby-browser.js</code>. В большинстве случаев лучший способ добавить глобальные стили - это использовать общий компонент макета. <a href=\"https://www.gatsbyjs.org/docs/global-css/\">Ознакомьтесь с документами</a> для получения дополнительной информации об этом подходе.</p>\n</blockquote>\n<h2>Использование CSS в области компонентов</h2>\n<p>До сих пор мы говорили о более традиционном подходе использования стандартных таблиц стилей css. Теперь мы поговорим о различных методах модулирования CSS для решения проблемы стилизации в компонентно-ориентированном виде.</p>\n<h3>CSS модули</h3>\n<p>Давайте рассмотрим <strong>CSS модули</strong>. Цитирую из\n<a href=\"https://github.com/css-modules/css-modules\">the CSS Module homepage</a>:</p>\n<blockquote>\n<p><strong>CSS модуль</strong> - это CSS-файл, в котором все имена классов и имена анимаций\nпо умолчанию ограничены локально.</p>\n</blockquote>\n<p>CSS модули очень популярны, потому что они позволяют писать CSS нормально, но с гораздо большей безопасностью. Инструмент автоматически генерирует уникальные имена классов и анимаций, поэтому вам не нужно беспокоиться о коллизиях имен селекторов.</p>\n<p>Gatsby работает из коробки с модулями CSS. Этот подход настоятельно рекомендуется для тех, кто новичок в строительстве с Gatsby (и React в целом).</p>\n<h4>Создание новой страницы с помощью CSS модулей</h4>\n<p>В этом разделе вы создадите новый компонент страницы и стиль этого компонента страницы с помощью модуля CSS.</p>\n<p>Сначала создайте новый компонент <code class=\"language-text\">Container</code>.</p>\n<ol>\n<li>Создайте новый каталог в <code class=\"language-text\">src/components</code>, а затем в этом новом каталоге создайте файл <code class=\"language-text\">container.js</code> и в него вставьте следующее:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/components/container.js\"><pre class=\"language-jsx:title=src/components/container.js\"><code class=\"language-jsx:title=src/components/container.js\">import React from &quot;react&quot;\nimport containerStyles from &quot;./container.module.css&quot;\n\nexport default ({ children }) =&gt; (\n  &lt;div className={containerStyles.container}&gt;{children}&lt;/div&gt;\n)</code></pre></div>\n<p>Обратите внимание, что вы импортировали файл модуля css с именем <code class=\"language-text\">container.module.css</code>. Давайте создадим этот файл сейчас.</p>\n<ol start=\"2\">\n<li>В том же каталоге (<code class=\"language-text\">src/components</code>) создайте файл <code class=\"language-text\">container.module.css</code> и вставьте следующее:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/components/container.module.css\"><pre class=\"language-css:title=src/components/container.module.css\"><code class=\"language-css:title=src/components/container.module.css\">.container {\n  margin: 3rem auto;\n  max-width: 600px;\n}</code></pre></div>\n<p>Вы заметили, что имя файла заканчивается на <code class=\"language-text\">.module.css</code> вместо обычного <code class=\"language-text\">.css</code>. Именно так вы сообщаете Gatsby, что этот CSS-файл должен обрабатываться как модуль CSS, а не как простой CSS.</p>\n<ol start=\"3\">\n<li>Создайте новый компонент страницы, создав файл по адресу\n<code class=\"language-text\">src/pages/about-css-modules.js</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/about-css-modules.js\"><pre class=\"language-jsx:title=src/pages/about-css-modules.js\"><code class=\"language-jsx:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\n\nimport Container from &quot;../components/container&quot;\n\nexport default () =&gt; (\n  &lt;Container&gt;\n    &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n    &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n  &lt;/Container&gt;\n)</code></pre></div>\n<p>А теперь, если вы посетите <code class=\"language-text\">http://localhost:8000/about-css-modules/</code>, ваша страница должна выглядеть примерно так:</p>\n<p><img src=\"css-modules-basic.png\" alt=\"Page with CSS module styles\"></p>\n<p>В этом разделе вы создадите список людей с именами, аватарами и краткими биографиями. Вы создадите компонент <code class=\"language-text\">&lt;User /></code> и оформите его с помощью CSS модуля.</p>\n<ol>\n<li>\n<p>Создайте файл для CSS по адресу <code class=\"language-text\">src/pages/about-css-modules.module.css</code>.</p>\n</li>\n<li>\n<p>Вставьте в новый файл следующее:</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css:title=src/pages/about-css-modules.module.css\"><pre class=\"language-css:title=src/pages/about-css-modules.module.css\"><code class=\"language-css:title=src/pages/about-css-modules.module.css\">.user {\n  display: flex;\n  align-items: center;\n  margin: 0 auto 12px auto;\n}\n\n.user:last-child {\n  margin-bottom: 0;\n}\n\n.avatar {\n  flex: 0 0 96px;\n  width: 96px;\n  height: 96px;\n  margin: 0;\n}\n\n.description {\n  flex: 1;\n  margin-left: 18px;\n  padding: 12px;\n}\n\n.username {\n  margin: 0 0 12px 0;\n  padding: 0;\n}\n\n.excerpt {\n  margin: 0;\n}</code></pre></div>\n<ol start=\"3\">\n<li>Импортируйте новый файл <code class=\"language-text\">src/pages/about-css-modules.module.css</code> в страницу <code class=\"language-text\">about-css-modules.js</code>, которую вы создали ранее, отредактировав первые несколько строк файла следующим образом:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript:title=src/pages/about-css-modules.js\"><pre class=\"language-javascript:title=src/pages/about-css-modules.js\"><code class=\"language-javascript:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\n// highlight-next-line\nimport styles from &quot;./about-css-modules.module.css&quot;\nimport Container from &quot;../components/container&quot;\n\n// highlight-next-line\nconsole.log(styles)</code></pre></div>\n<p>Код <code class=\"language-text\">console.log(styles)</code> будет выводить полученный импорт, чтобы вы могли видеть результат обработки файла <code class=\"language-text\">./about-css-modules.module.css</code>. Если вы откроете консоль разработчика (например, с помощью инструментов разработчика Firefox или Chrome, часто с помощью клавиши F12) в вашем браузере, вы увидите:</p>\n<p><img src=\"css-modules-console.png\" alt=\"Import result of CSS module in console\"></p>\n<p>Если вы сравните это с вашим CSS-файлом, вы увидите, что каждый класс является сейчас ключевым в импортированный объект, указывая на длинную строку, например <code class=\"language-text\">avatar</code> указывает на <code class=\"language-text\">src-pages----about-css-modules-module---avatar---2lRF7</code>. Это имена классов, которые генерируют модули CSS. Они гарантированно будут уникальными на вашем сайте. И поскольку вы должны импортировать их, чтобы использовать классы, никогда не возникает вопроса о том, где используется некоторый CSS.</p>\n<ol start=\"4\">\n<li>Создайте новый компонент <code class=\"language-text\">&lt;User /></code>, встроенный в страницу <code class=\"language-text\">about-css-modules.js</code> компонента. Измените <code class=\"language-text\">about-css-modules.js</code> следующим образом:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx:title=src/pages/about-css-modules.js\"><pre class=\"language-jsx:title=src/pages/about-css-modules.js\"><code class=\"language-jsx:title=src/pages/about-css-modules.js\">import React from &quot;react&quot;\nimport styles from &quot;./about-css-modules.module.css&quot;\nimport Container from &quot;../components/container&quot;\n\nconsole.log(styles)\n\n// highlight-start\nconst User = props =&gt; (\n  &lt;div className={styles.user}&gt;\n    &lt;img src={props.avatar} className={styles.avatar} alt=&quot;&quot; /&gt;\n    &lt;div className={styles.description}&gt;\n      &lt;h2 className={styles.username}&gt;{props.username}&lt;/h2&gt;\n      &lt;p className={styles.excerpt}&gt;{props.excerpt}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n)\n// highlight-end\n\nexport default () =&gt; (\n  &lt;Container&gt;\n    &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n    &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n    {/* highlight-start */}\n    &lt;User\n      username=&quot;Jane Doe&quot;\n      avatar=&quot;https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg&quot;\n      excerpt=&quot;I&#39;m Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n    /&gt;\n    &lt;User\n      username=&quot;Bob Smith&quot;\n      avatar=&quot;https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg&quot;\n      excerpt=&quot;I&#39;m Bob Smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n    /&gt;\n    {/* highlight-end */}\n  &lt;/Container&gt;\n)</code></pre></div>\n<blockquote>\n<p>Совет: как правило, если вы используете компонент в нескольких местах на сайте, он должен находиться в собственном файле модуля в каталоге <code class=\"language-text\">components</code>. Но если он используется только в одном файле, создайте его встроенным.</p>\n</blockquote>\n<p>Готовая страница теперь должна выглядеть так:</p>\n<p><img src=\"css-modules-userlist.png\" alt=\"User list page with CSS modules\"></p>\n<h3>CSS-in-JS</h3>\n<p>CSS-in-JS является компонентно-ориентированным подходом моделирования. Как правило, это шаблон, где <a href=\"https://reactjs.org/docs/faq-styling.html#what-is-css-in-js\">CSS составляется встроенным с помощью JavaScript</a>.</p>\n<h4>Использование CSS-in-JS с Gatsby</h4>\n<p>Существует множество различных библиотек CSS-in-JS, и многие из них уже имеют плагины Gatsby. Мы не будем рассматривать пример CSS-in-JS в этом начальном руководстве, но мы рекомендуем вам [изучить]<a href=\"https://www.gatsbyjs.org/docs/styling/\">https://www.gatsbyjs.org/docs/styling/</a>, что может предложить экосистема. Существуют мини-учебники для двух библиотек, в частности, [Emotion]<a href=\"https://www.gatsbyjs.org/docs/emotion/\">https://www.gatsbyjs.org/docs/emotion/</a> и [Styled Components] <a href=\"https://www.gatsbyjs.org/docs/styled-components/\">https://www.gatsbyjs.org/docs/styled-components/</a>.</p>\n<h4>Рекомендуемое чтение о CSS-in-JS</h4>\n<p>Если вы заинтересованы в дальнейшем чтении, ознакомьтесь с презентацией <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">Christopher “vjeux” Chedeau’s 2014 presentation that sparked this movement</a>, а также <a href=\"https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660\">Mark Dalgleish’s more recent post “A Unified Styling Language”</a>.</p>\n<h3>Другие параметры CSS</h3>\n<p>Gatsby поддерживает практически все возможные варианты стилей (если еще нет плагина для вашего любимого варианта CSS, [пожалуйста, внесите свой вклад!]<a href=\"https://www.gatsbyjs.org/contributing/how-to-contribute/\">https://www.gatsbyjs.org/contributing/how-to-contribute/</a></p>\n<ul>\n<li>[Typography.js]<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-typography/\">https://www.gatsbyjs.org/packages/gatsby-plugin-typography/</a></li>\n<li>[Sass]<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-sass/\">https://www.gatsbyjs.org/packages/gatsby-plugin-sass/</a></li>\n<li>[JSS]<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-jss/\">https://www.gatsbyjs.org/packages/gatsby-plugin-jss/</a></li>\n<li>[Stylus]<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-stylus/\">https://www.gatsbyjs.org/packages/gatsby-plugin-stylus/</a></li>\n<li>[PostCSS]<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-postcss/\">https://www.gatsbyjs.org/packages/gatsby-plugin-postcss/</a></li>\n</ul>\n<h2>Что будет дальше?</h2>\n<p>Теперь перейдите к <a href=\"https://www.gatsbyjs.org/tutorial/part-three/\">третьей части руководства</a>, где вы узнаете о плагинах и компонентах layout Gatsby.</p>","frontmatter":{"title":"Руководство по Gatsby. Введение в стилизацию","date":"28 February 2020","description":"Как применять стили в генераторе статических сайтов Gatsby. Описаны способы стилизации с помощью CSS файлов, CSS модулей и CSS-in-JS"}}},"pageContext":{"slug":"/gatsby/introduction-to-styling-in-gatsby/","previous":{"fields":{"slug":"/gatsby/gatsby-without-graphql/"},"frontmatter":{"title":"Gatsby без GraphQL"}},"next":{"fields":{"slug":"/MongoDB-and-Mongoose/url-shortener-microservice/"},"frontmatter":{"title":"Генерация коротких URL адресов"}}}},
    "staticQueryHashes": ["63159454","71715879"]}