{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/github/guide-git-i-github/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jinv.ru"}},"markdownRemark":{"id":"7746d619-c84c-5c95-acc7-00941b8208ce","excerpt":"Полезные команды по работе с Git и Github Данный справочник является кратким конспектом из источника git-scm.com и некоторых других ресурсов Открываем командную…","html":"<h2>Полезные команды по работе с Git и Github</h2>\n<p>Данный справочник является кратким конспектом из <a href=\"https://git-scm.com/book/ru/v2\">источника git-scm.com</a> и некоторых других ресурсов</p>\n<p>Открываем командную строку. С помощью команды cd переходим в нужную нам директорию проекта</p>\n<hr>\n<ul>\n<li>git status\n<ul>\n<li>показывает состояние файлов</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git status\n<ul>\n<li>показывает состояние файлов</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git init\n<ul>\n<li>инициализирует Git-репозиторий (создается поддиректория .git)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git add as.js\n<ul>\n<li>добавляет (индексирует) файл as.js для следующего коммита</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git add as.js\n<ul>\n<li>добавляет (индексирует) файл as.js для следующего коммита</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git add .\n<ul>\n<li>добавляет в индекс все файлы.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git add -u\n<ul>\n<li>добавляет в индекс все измененные файлы.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git commit -m “first commit”\n<ul>\n<li>фиксирует изменения с коментарием в кавычках (параметр -m указывает на коментарий)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git commit -a -m “added new”\n<ul>\n<li>параметр -a заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без git add</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git reset — path/file.cpp\n<ul>\n<li>удаляет из индекса файл path/file.cpp.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git rm —cached as.js\n<ul>\n<li>удаляет файл as.js из индекса, не удаляя его в рабочей директории</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git rm -r —cached qsf<br>\n-удаляет каталог qsf (рекурсивно) из индекса, не удаляя его в рабочей директории</li>\n</ul>\n<hr>\n<h3>Ветвление</h3>\n<hr>\n<ul>\n<li>git branch\n<ul>\n<li>выводит список имеющихся веток (символ * указывает ветку, на которую указывает HEAD т.е. ветку, на которой вы находитесь в настоящий момент)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch dev\n<ul>\n<li>создает ветку с именем dev (но не переключает вас на нее!)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch -d dev\n<ul>\n<li>удаляет ветку с именем dev</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git checkout dev\n<ul>\n<li>переключает на ветку dev</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git checkout -b dev\n<ul>\n<li>создает ветку dev и сразу переключается на нее</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch -v\n<ul>\n<li>показывает последний коммит в каждой ветке</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch -m old new\n<ul>\n<li>переименоввает локальную ветку с old на new</li>\n</ul>\n</li>\n</ul>\n<h3>Слияние</h3>\n<p>Обратите внимание Перед тем как слить ветки, нужно с помощью команды git checkout &#x3C;name_branch> перейти в ту ветку, в которую будет производится слияние</p>\n<hr>\n<ul>\n<li>git merge dev\n<ul>\n<li>вливает ветку dev в текущую ветку</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git mergetool\n<ul>\n<li>открывает графический инструмент для разрешения конфликтов</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch —merged\n<ul>\n<li>показывает список веток, которые вы уже слили с текущей. Те ветки из этого списка, перед которыми нет символа *, можно смело удалять командой git branch -d; наработки из этих веток уже включены в другую ветку, так что ничего не потеряется.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git branch —no-merged\n<ul>\n<li>показывает список веток, содержащие наработки, которые вы пока ещё не слили в текущую ветку. Эти ветки невозможно удалить командой git branch -d</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>Удаленные репозитории</h3>\n<p>Каждый удаленный репозиторий имеет URL адрес и сокращенное имя</p>\n<hr>\n<ul>\n<li>git remote\n<ul>\n<li>Отображает сокращенные имена (мемы) удалённых репозиториев</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git remote -v\n<ul>\n<li>Отображает сокращенные имена (мемы) удалённых репозиториев и соответствующие им URL</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git remote show og\n<ul>\n<li>Отображает информацию об удалённом репозитории og</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git remote add og url\n<ul>\n<li>Добавляет новый удалённый репозиторий по адресу url, которому дается сокращенное имя og. Это позволит в дальнейшем обращатся к удаленному репозиторию по имени (вместо url)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git clone url\n<ul>\n<li>Клонирует репозиторий из указанного адреса url</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git clone url asd\n<ul>\n<li>Клонирует репозиторий из указанного адреса url и переименовывает в asd</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git push og dev\n<ul>\n<li>Отправляет ветку dev на удаленный репозиторий og (og - это либо полный путь к удаленному репозиторию, либо его сокращенный мем). Эта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас есть права на запись, и если никто другой с тех пор не выполнял команду push. Если вы и кто-то ещё одновременно клонируете, затем он выполняет команду push, а затем команду push выполняете вы, то ваш push точно будет отклонён. Вам придётся сначала вытянуть (pull) их изменения и объединить с вашими. Только после этого вам будет позволено выполнить push.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git push -u og dev\n<ul>\n<li>Отправляет ветку dev на удаленный сервер og и связывает локальную ветку dev и ветку dev в удаленном репозитарии. То есть, после такой команды (которая выполняется единожды), можно будет отправлять/принимать изменения лишь выполняя git push из ветки без указания всяких алиасов для сервера и удалённых веток.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git fetch og\n<ul>\n<li>Извлекает из удаленного репозитория og все изменения, которых нет в вашем локальном репозитории, но не сливает их с вашими наработками и не модифицирует то, над чем вы работаете в данный момент. Вам необходимо вручную слить эти данные с вашими, когда вы будете готовы с посощью команды merge.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git push og —delete ser\n<ul>\n<li>Удаляет ветку ser на сервере og. На самом деле, удаляется указатель на сервере. Как правило, Git-сервер оставит данные, пока не запустится сборщик мусора. Т. е., если ветка случайно была удалена, чаще всего ее легко восстановить.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git remote rename kt oleg\n<ul>\n<li>Переименовывает удаленный репозиторий kt в oleg</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>git remote rm paul\n<ul>\n<li>Удаляет ссылку на удаленный репозиторий. Это бывает нужно, например, если вы сменили сервер или больше не используете определённое зеркало, или, возможно, контрибьютор перестал быть активным</li>\n</ul>\n</li>\n</ul>\n<h2>Полезные советы по работе с Git и Github</h2>\n<hr>\n<ul>\n<li>\n<p>Как удалить commit в Github</p>\n<ul>\n<li>\n<ol>\n<li>Получаем хэш-код коммита, к которому хотим вернуться.</li>\n<li>Заходим в папку репозитория и пишем в консоль:</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git reset --hard 209d0eb765a6760f2a7c65be8d7ff0f8342e1e4f\n  git push --force</code></pre></div>\n</li>\n</ul>\n<hr>","frontmatter":{"title":"Краткий справочник по командам Git","date":"20 May 2019","description":null}}},"pageContext":{"slug":"/github/guide-git-i-github/","previous":null,"next":{"fields":{"slug":"/Express/Basic-Node-and-Express/"},"frontmatter":{"title":"Основы Node и Express"}}}},
    "staticQueryHashes": ["63159454","71715879"]}